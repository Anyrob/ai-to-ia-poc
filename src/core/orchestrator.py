"""
Module responsible for executing the plan generated by the `PlanGenerator`
(`src.core.plan_generator`).
"""


from typing import Dict
from src.models.chatgpt import ChatGPT, GPTTools


class Orchestrator:
    """
    Class responsible for executing the generated plan by calling each of the
    models in the correct order, and returning the result.

    Static Methods
    --------------
    execute_plan(plan: Dict[str, object]) -> str
        Executes the plan and returns the result.

    _assemble_prompt(tool: GPTTools, plan: Dict[str, object]) -> str
        Assembles the prompt for the given tool.
    """

    @staticmethod
    def execute_plan(plan: Dict[str, object]) -> str:
        """Executes the plan and returns the result."""
        for tool in plan["model_sequence"]:
            if tool != GPTTools.UNINPLEMENTED:
                prompt = Orchestrator._assemble_prompt(tool, plan)

                gpt4 = ChatGPT(tool)
                gpt4.execute(prompt)
                gpt4.parse()

        return gpt4.result

    @staticmethod
    def _assemble_prompt(tool: GPTTools, plan: Dict[str, object]) -> str:
        """Assembles the prompt for the given tool."""

        prompt = (
            f"{plan['original_question']} \n"
            f"Options: {plan['optional_responses']}\n"
            f"Metadata: {plan['metadata']}\n"
            f"Knowledge: {plan['retrieved_knowledge']}\n"
        )

        return f"{tool.value.PROMPT} \n + {prompt}"
